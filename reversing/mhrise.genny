type uint64_t 8 [[u64]]
type int32_t 4 [[i32]]
type uint32_t 4 [[u32]]
type int16_t 2 [[i16]]
type uint16_t 2 [[u16]]
type uint8_t 1 [[u8]]
type float 4 [[f32]]
type char 1
type void 0
type wchar_t 2 [[u16]]
type bool 1 [[u8]]

namespace regenny{
struct TypeDefinition{}
struct ManagedVtable{}
struct BullShit 0x100{}

namespace via.typeinfo{
struct TypeInfo {}
}

namespace via {
	struct vec3 {
		float x;
		float y;
		float z;
	};

	struct vec4 : vec3 {
		float w;
	};

	struct mat4 {
		float m[4][4];
	};

	struct Object {
		void* vtable;
	};
};

namespace via.clr {
    struct ManagedObject {
        ManagedVtable* info
        uint32_t reference_count
        uint32_t unk
    }
}


namespace via {
    enum class CameraType : uint32_t {
        Game = 0,
        Debug = 1,
        Scene = 2,
        SceneXY = 3,
        SceneYZ = 4,
        SceneXZ = 5,
        Preview = 6,
    }

    enum class DisplayType : uint32_t {
        Fit = 0,
        Uniform4x3 = 1,
        Uniform16x9 = 2,
        Uniform16x10 = 3,
        Uniform21x9 = 4,
        Uniform32x9 = 5,
        Uniform48x9 = 6,
        Fix480p = 7,
        Fix720p = 8,
        Fix1080p = 9,
        Fix4K = 10,
        Fix8K = 11,
        FixResolution = 12,
        FixResolution16x9 = 13,
        NintendoSwitch = 14,
        Fix684x384 = 15,
        Fix1368x768 = 16,
        Nexus6P = 17,
        GalaxyS9 = 18,
        XperiaZ5Premium = 19,
        iPhoneX = 20,
        iPhone7 = 21,
        ZenPadS8 = 22,
    }


    enum class BasisPlane : uint32_t{
        XZ = 0,
        XY = 1,
        YZ = 2,
    }

    enum class MobileBarState : uint32_t{None = 0}
    enum class DeviceOrientation : uint32_t{None = 0}
    enum class RenderType : uint32_t{None = 0}

    struct Window{}
    struct Scene{}

    struct Color {
        uint32_t rgba
    }
    struct Size {
        float w
        float h
    }

	struct Point {
		float x;
		float y;
	};

	struct Window  0x100 {
		void* vtable
		uint32_t width @ 0x58
		uint32_t height
		via.Point cursor_pos;
  	  bool show_cursor;
		via.Size borderless_size @ 0x98
	};

    struct SceneView : via.clr.ManagedObject 0xb0 {
        Window* window @ 0x10
        Scene* scene
        via.Color background_color @ 0x20
        wchar_t* name @ 0x28 [[utf16*]]
        via.Size size @ 0x30
		via.Size custom_display_size
		via.Size present_rect
        bool draw_develop @ 0x60
        bool tool_light
        bool show_icons
        bool outline_fadeout_enable
        DisplayType display_type
        via.BasisPlane basis_plane
        CameraType camera_type
        RenderType render_type
        int32_t icon_size
        float indicator_scale
        void* message_function_handle @ 0x90
        via.DeviceOrientation orientation @ 0x9C
        via.MobileBarState mobile_status_bar_state
        via.MobileBarState mobile_nav_bar_state
        bool fix_mobile_nav_bar_bottom
    }

    struct Scene : via.clr.ManagedObject{
        char asdf
        float timescale @ 0x20
    }

    struct SceneArray {
        int32_t count
        via.Scene** elements @ 0x8
    }
}

namespace via {
    struct SceneManager 0x1D8 {
        via.SceneView* main_view @ 0x48
        via.Scene* main_scene @ 0x50
        via.SceneArray scenes @ 0x78
    }
}

namespace via {
	struct Transform{};
	struct Folder{};

	struct GameObject : via.clr.ManagedObject 0x50 {
		bool Update @ 0x12;
		bool Draw;
		bool UpdateSelf;
		bool DrawSelf;
		via.Transform* Transform +2
		via.Folder* folder
		
		float timescale @ 0x4C
	};

	struct Component : via.clr.ManagedObject {
		via.GameObject* GameObject;
		via.Component* ChildComponent;
		via.Component* PrevComponent;
		via.Component* NextComponent;
	};

	struct Folder : via.clr.ManagedObject {
	};

	struct JointDesc {
		wchar_t* name [[utf16*]];
		uint32_t name_hash;
		int16_t parent_index;
		int16_t symmetry_index;
		via.vec4 position;
		via.vec4 rotation;
		via.vec4 scale;
	};
	
	struct Joint : via.clr.ManagedObject 0x60 {
		via.Transform* Owner;
		via.JointDesc* Desc;
		via.vec4 LocalPosition;
		via.vec4 LocalRotation;
		via.vec4 LocalScale
		int32_t ConstraintJointIndex;
		int32_t JointIndex;
	};
		
	// VMArray/REArray/whatever
	struct JointArray : via.clr.ManagedObject {
		via.typeinfo.TypeInfo* array_type
		int32_t count;
		int32_t num_allocated;
		Joint* joints[256];
	};

	struct Transform : via.Component 0x110 {
		via.vec4 Position @ 0x30
		via.vec4 Rotation @ 0x40
		via.vec4 Scale @ 0x50

		via.Scene* Scene 
		via.Transform* Child @ 0x68
		via.Transform* Next
		via.Transform* Parent
		via.mat4 WorldTransform
		void* JointHashTbl;
		int32_t ParentJointIndex
		int32_t UpdateFrame @ 0xCC
		bool SameJointsConstraint;
		bool DirtySelf;
		bool DirtyUpwards;
		bool AbsoluteScaling;
		JointArray* JointTbl + 4
		via.mat4* JointMatrixTbl;
	};

	struct JointData
    {
      via.vec4 rotation;
      via.vec4 translation;
      via.vec4 scale;
      via.vec4 blend;
    };


	struct JointMap {
		JointData* joints;
		int32_t num_joints + 4
	};

	struct Motion 0x1000 {
		JointMap jointmap @ 0x200
	};
}

namespace via {
	namespace motion {
		enum AxisDirection {
			X = 1,
			Y = 2,
			NZ = 7
		};
	}

struct Range {
	float s;
	float r;
};
}

namespace via.typeinfo {
    struct TypeInfo{
        void* vfptr
        uint32_t fqn_hash
        uint16_t attributes
        uint16_t type
        uint64_t fast_class_index
        uint64_t bsr_fast_class_index
        char* name [[utf8*]]
        uint32_t parent_typeid
        uint32_t size
        uint32_t crc
        uint32_t mics_flags
        via.typeinfo.TypeInfo* parent
        via.typeinfo.TypeInfo* child
        via.typeinfo.TypeInfo* next
        void* reflection
        TypeDefinition* type_definition
    }
}

namespace {
struct TypeDefinition 0x80 {
    uint64_t index : 18;
    uint64_t parent_typeid : 18;
    uint64_t declaring_typeid : 18;
    uint64_t underlying_typeid : 7;
    uint64_t object_type : 3;
    uint64_t array_typeid : 18;
    uint64_t element_typeid : 18;
    uint64_t impl_index : 18;
    uint64_t system_typeid : 10;

    uint32_t type_flags;
    uint32_t size;
    uint32_t fqn_hash;
    uint32_t type_crc;
    uint32_t default_ctor;
    uint32_t vt;
    uint32_t member_method;
    uint32_t member_field;

    // 0x0030
    uint32_t num_member_prop : 12;
    uint32_t member_prop : 19;

    uint32_t member_event;
    int32_t interfaces;
    int32_t generics;
    via.typeinfo.TypeInfo* type;
    ManagedVtable* managed_vt;
}

struct ManagedVtable {
	TypeDefinition* t
	void* funcs[32]
}
}

namespace {
struct DeserializeSequence {
    uint32_t code : 8;
    uint32_t size : 8;
    uint32_t align : 8;
    uint32_t depth : 6;
    uint32_t is_array : 1;
    uint32_t is_static : 1;
    
    uint32_t offset;
    TypeDefinition* native_type;
};
}

namespace tdb67 {
	struct MethodDefinition 0xC {
	}

	struct MethodImpl {
	};

	struct TypeDefinition 0x48 {
	};

	struct TypeImpl 0x30 {
	};

	struct Field 8 {
	};

	struct FieldImpl 0xC {
	};

	struct Property {
	};
	
	struct PropertyImpl {
	};

	struct ParameterDef {
	};

	struct AttributeDef {
	};

	struct ParamList {
	};

    struct TDB {
    }
}

namespace System {
	struct String : via.clr.ManagedObject 0x100 {
		int32_t len
		char data[256] [[utf16*]]
	};
};

namespace game {
	struct InputSystem : via.clr.ManagedObject 0x170 {
	};

	struct IkArmFit 0x100 {
		struct ArmSolver : via.clr.ManagedObject 0x30 {
			via.Joint* ApplyJoint;
			via.motion.AxisDirection Dir;
			via.motion.AxisDirection Up;
			via.motion.AxisDirection Rot;
			float L0;
			float L1;
		};

		struct ArmData : via.clr.ManagedObject 0x80 {
			float BlendRate;
			via.Range ReachRate;
			System.String* ApplyHandName + 4;
			bool LeftHand;
			float DefaultHandAngle + 3
			via.Range AxisYRange;
			via.Range AxisZRange
			via.mat4 TargetMatrix;
		};
	}
}

namespace via {
	namespace gui {
		struct GUIManager{}
	}

	struct array : via.clr.ManagedObject 0x100 {
		TypeDefinition* contained_type
		int32_t count
		int32_t allocated
	};

	struct JobSet {
		struct Job{};
	};

	struct fixed_array_jobs {
		via.JobSet.Job jobs[8];
	};

	struct JobSet {
		struct JobThing 0x100 {
			void* func;
		};

		struct Unk 0x100{
			void** vtable;
			via.Object* owner;
			void* func
			via.Object* owner2 + 8;
		};

    	Unk* data;
	};
	
	namespace gui {
		struct TransformObject {};
		struct View {};

		struct PrimitiveContext 0x300 {
			int32_t gui_camera @ 0xEC
		};

		struct GUIMeshRenderer 0x100 {
			
		};

		struct GUI : via.Component  0x2D0 {
			via.SceneView* SceneView;
			void* GUIResource;
			void* RtTextureHandle;
			void* GUISound;
			bool Enabled @ 0x50
			bool FailedSetup;
			uint8_t MaskLayerBits;
			uint8_t MaskLayerBits2;
			uint8_t MaskLayerBits3;
			uint32_t RenderOutputID @ 0x58
			float PlaySpeed @ 0x5C
			uint32_t Segment;
			uint32_t SoftParticleDistType @ 0x64
			float SoftParticleDist;
			View* View + 4;
		};

		struct Control : TransformObject 0x1B0 {
			uint32_t StatePattern @ 0x124
			float PlayFrame @ 0x128
			via.vec4 ColorScale
			via.vec3 ColorOffset
			float Saturation
			bool UseGUISound @ 0x188
		};

		struct Window : Control 0x1C0 {
			bool Open
		};

		struct View : Window 0x1E0 {
			bool Overlay @ 0x1C0
			bool DepthTest;
			bool DetoneMap;
			bool CoordCorrection;
			uint32_t ViewType @ 0x1C4;
			uint32_t ReprojectionType+4;
			via.Size ScreenSize ;
			float BaseFps @ 0x1D8
			bool UseGUICamera
		};
	
		struct PlayObject : via.clr.ManagedObject 0x50 {
			wchar_t* Name [[utf16*]]
			GUI* Component;
			Control* Parent @ 0x28
			PlayObject* Next;
			PlayObject* Prev;
			
			uint16_t Priority @ 0x42

			uint8_t pad @ 0x47

			// Render flags
			uint64_t Visible : 1; // 1
            uint64_t Visible2 : 1; // 2
            uint64_t HitVisible : 1; // 3
            uint64_t ShouldPlay : 1; // 4
            uint64_t IsPlaying : 1; // 5
            uint64_t IsInteractive : 1; // 6
            uint64_t HasName : 1; // 7
            uint64_t HasTag : 1; // 8
            uint64_t SequenceAsset : 1; // 9
            uint64_t IsPNG : 1; // 10
            uint64_t IsJPG : 1; // 11
            uint64_t LinearAlphaBlend : 1; // 12
            uint64_t CompOwnership : 1; // 13
            uint64_t DuplicateRoot : 1; // 14
            uint64_t DataBind : 1; // 15
            uint64_t DataBinding : 1;  // 16
            uint64_t AllocExData : 1;  // 17
            uint64_t NextStateEnable : 1; // 18
            uint64_t _Unk : 1;  // 19
            uint64_t _Unk2 : 1;  // 20
            uint64_t ResolutionAdjust : 1; // 21
            uint64_t UniqueVisible : 1; // 22
            uint64_t EffectAlphaType : 1; // 23
            uint64_t HasOverrideProp : 1; // 24
            uint64_t IsCapturable : 1; // 25
            uint64_t ForceInvisible : 1; // 26
            uint64_t ClipPlaying : 1; // 27
            uint64_t BlendType : 2; // 28-29
            uint64_t MaskType : 3; // 30 - 32
            uint64_t MaskMode : 3; // 33 - 35
            uint64_t ColorType : 2; // 36 - 37
            uint64_t ControlPoint : 4; // 38 - 41
            uint64_t ResolutionCond : 2; // 42 - 43
            uint64_t ResolutionScale : 2; // 44 - 45
            uint64_t UVType : 2; // 46 - 47
            uint64_t UnkFlags : 17;
		};

		struct TransformObject : PlayObject 0x120 {
		};

		struct GUIManager 0x1A0 {
			via.JobSet update_task @ 0xe0
			via.JobSet draw_task @ 0x120;
		};
	}
}

namespace via {
struct Sphere 0x10 {
	via.vec3 pos;
	float r;
};

struct Capsule 0x30 {
	via.vec4 p0;
	via.vec4 p1;
	float r;
};

struct OBB 0x50 {
	via.mat4 coord;
	via.vec3 extent;
};

namespace motion {
struct ChainCollisionArray{};
struct ChainCollisionData{};

struct ChainCollisions 0x140 {
	via.Sphere sphere;
	via.Capsule capsule;
	via.vec4 offset @ 0x90
	via.vec4 pair_offset
	
	via.Joint* joint @ 0xF0
	via.Joint* pair_joint
	ChainCollisionData* data;
	ChainCollisionArray* owner;
	float radius;
	float radius2;
	int32_t d;
	int32_t pad1;
	int32_t pad2;
	uint32_t flags;
};

struct ChainCollisionData {
	void* sub_data;
	via.vec3 pos;
	via.vec3 pair_pos;
	uint32_t joint_hash;
	uint32_t pair_joint_hash;
	float radius;
	float lerp;
	uint8_t shape_type;
	uint8_t div;
	uint8_t num_sub_data;
	uint8_t unk;
	uint32_t flags;
	uint32_t unk;
};

struct ChainCollisionArray {
	ChainCollisions* collisions
	int32_t num;
	int32_t num_allocated;
	int32_t preset_id;
};

struct SecondaryAnimation 0x48 {
};

struct Chain {
	ChainCollisionArray CollisionData @ 0x60;
	float BlendRate @ 0xEC
	float FreezeRate @ 0xF0
	float StepFrame @ 0x130
	uint32_t CalculateMode @ 0x208
	uint32_t GravityCoord @ 0x210
};
}
}
}