type uint64_t 8 [[u64]]
type int32_t 4 [[i32]]
type uint32_t 4 [[u32]]
type int16_t 2 [[i16]]
type uint16_t 2 [[u16]]
type uint8_t 1 [[u8]]
type float 4 [[f32]]
type char 1
type void 0
type wchar_t 2 [[u16]]
type bool 1 [[u8]]

namespace regenny{
struct TypeDefinition{}
struct ManagedVtable{}
struct BullShit 0x1000{}

namespace via {
	struct vec3 {
		float x;
		float y;
		float z;
	};

	struct vec4 : vec3 {
		float w;
	};

	struct mat4 {
		float m[4][4];
	};

	struct Object {
		void** vtable;
	};

	namespace typeinfo {
		struct TypeInfo {
		};
	}
};

struct TypeArray {
	via.typeinfo.TypeInfo** data;
	uint32_t num
	uint32_t num_allocated
};

namespace tdb49 {
	struct TDB{}
	struct TypeDefinition{}
	struct FieldDefinition{}
	struct MethodDefinition{}
}

namespace via.clr {
	struct VM 0x10000 {
		struct Type{};

		struct Module 0x30 {
			void** vtable
			char* name @ 0x8 [[utf8*]]
		};

		struct FullModule 0x40 {
			uint32_t unk1 + 8;
			uint32_t unk2;
			Module module @ 0x10
		};

		struct ModuleContainer 0x10 {
			Module* module
			FullModule* full_module
		};

		struct ModuleArray {
			ModuleContainer* modules;
			uint32_t num;
			uint32_t num_allocated;
		};

		struct Method 0x20 {
			tdb49.MethodDefinition* tdb_method;
			void* function + 8
		};

		struct Field 0x18 {
			tdb49.FieldDefinition* tdb_field;
			uint32_t unk;
			uint32_t offset;
			Type* type;
		};

		struct Type 0x70 {
			tdb49.TypeDefinition* tdb_type;
			uint32_t type_flags;
			uint32_t fieldptr_offset			

			Type* parent @ 0x20;
			Type* next
			Method** methods @ 0x40;
			Field** fields;
			void* static_fields;
			via.typeinfo.TypeInfo* reflection_type @ 0x60;
			void** vtable @ 0x68;
		};
				
		ModuleArray modules @ 0x110
		
		// NativeArray
		Type* types @ 0x3A40;
		uint32_t num_types;
	
		// NativeArray
		Method* methods + 4;
		uint32_t num_methods;

		tdb49.TDB* tdb @ 0x3AC8
		BullShit** asdf @ 0x3af8
	};

    struct ManagedObject {
        void** vtable
        uint32_t reference_count
        uint32_t MO_unk;
		uint32_t MO_unk2;
		uint32_t MO_unk3;
		via.clr.VM.Type* vm_type
    }
}


namespace via {
    enum class CameraType : uint32_t {
        Game = 0,
        Debug = 1,
        Scene = 2,
        SceneXY = 3,
        SceneYZ = 4,
        SceneXZ = 5,
        Preview = 6,
    }

    enum class DisplayType : uint32_t {
        Fit = 0,
        Uniform4x3 = 1,
        Uniform16x9 = 2,
        Uniform16x10 = 3,
        Uniform21x9 = 4,
        Uniform32x9 = 5,
        Uniform48x9 = 6,
        Fix480p = 7,
        Fix720p = 8,
        Fix1080p = 9,
        Fix4K = 10,
        Fix8K = 11,
        FixResolution = 12,
        FixResolution16x9 = 13,
        NintendoSwitch = 14,
        Fix684x384 = 15,
        Fix1368x768 = 16,
        Nexus6P = 17,
        GalaxyS9 = 18,
        XperiaZ5Premium = 19,
        iPhoneX = 20,
        iPhone7 = 21,
        ZenPadS8 = 22,
    }


    enum class BasisPlane : uint32_t{
        XZ = 0,
        XY = 1,
        YZ = 2,
    }

    enum class MobileBarState : uint32_t{None = 0}
    enum class DeviceOrientation : uint32_t{None = 0}
    enum class RenderType : uint32_t{None = 0}

    struct Window{}
    struct Scene{}

    struct Color {
        uint32_t rgba
    }
    struct Size {
        float w
        float h
    }

	struct Point {
		float x;
		float y;
	};

	struct Window  0x1000 {
		void* vtable
		uint32_t width @ 0x40
		uint32_t height
		via.Point cursor_pos;
  	  bool show_cursor;
		//via.Size borderless_size @ 0x84
	};

    struct SceneView : via.clr.ManagedObject 0xb0 {
        Window* window
        Scene* scene
        //via.Color background_color
        wchar_t* name @ 0x38 [[utf16*]]
        via.Size size @ 0x58
		via.Size custom_display_size
		via.Size present_rect
        bool draw_develop @ 0x70
        bool tool_light
        bool show_icons
        bool outline_fadeout_enable
        DisplayType display_type
        via.BasisPlane basis_plane
        CameraType camera_type
        RenderType render_type
        int32_t icon_size
        float indicator_scale
        //void* message_function_handle @ 0xA8
        //via.DeviceOrientation orientation @ 0xAC
        //via.MobileBarState mobile_status_bar_state
        //via.MobileBarState mobile_nav_bar_state
        //bool fix_mobile_nav_bar_bottom
    }

    struct Scene : via.clr.ManagedObject{
        char asdf
        float timescale @ 0x20
    }

    struct SceneArray {
        int32_t count
        via.Scene** elements @ 0x8
    }
}

struct StdMapData 0x78 {
};

struct StdMapNode 0x98 {
	StdMapNode* _Left;
	StdMapNode* _Parent;
	StdMapNode* _Right;
	void* unk;
	StdMapData data;
};

struct StdMap {
	StdMapNode* _MyHead;
	int32_t _MySize;
	uint8_t pad[4];
};

namespace via {
	// std::map
	struct dictionary : StdMap {
	};
	
	struct delegate {
		void* unk;
		StdMap functions; // std::map
		void* mutex
	};

    struct SceneManager 0x1D8 {
		void**vtable;
		via.delegate on_add_scene_view
		via.delegate on_remove_scene_view
        via.SceneView* main_view @ 0x48
        via.Scene* main_scene @ 0x50
        via.SceneArray scenes @ 0x78
    }
}

namespace via {
	struct Transform{};
	struct Folder{};

	struct GameObject : via.clr.ManagedObject 0x50 {
		bool Update + 2;
		bool Draw;
		bool UpdateSelf;
		bool DrawSelf;
		via.Transform* Transform +2
		via.Folder* folder
		
		float timescale @ 0x4C
	};

	struct Component : via.clr.ManagedObject {
		via.GameObject* GameObject;
		via.Component* ChildComponent;
		via.Component* PrevComponent;
		via.Component* NextComponent;
		
	};

	struct Folder : via.clr.ManagedObject {
	};

	struct JointDesc {
		wchar_t* name [[utf16*]];
		uint32_t name_hash;
		int16_t parent_index;
		int16_t symmetry_index;
		via.vec4 position;
		via.vec4 rotation;
		via.vec4 scale;
	};
	
	struct Joint : via.clr.ManagedObject 0x60 {
		via.Transform* Owner;
		via.JointDesc* Desc;
		via.vec4 LocalPosition;
		via.vec4 LocalRotation;
		via.vec4 LocalScale
		int32_t ConstraintJointIndex;
		int32_t JointIndex;
	};

	struct JointArray {
		Joint** joints;
		int32_t count;
		int32_t num_allocated;
	};

	struct Transform : via.Component 0x110 {
		via.vec4 Position @ 0x40
		via.vec4 Rotation @ 0x50
		via.vec4 Scale @ 0x60

		//via.Scene* Scene 
		via.Transform* Parent @ 0x70
		via.Transform* Child
		via.Transform* Next
		via.Transform* Prev
		via.mat4 WorldTransform
		void* JointHashTbl;
		int32_t ParentJointIndex
		int32_t UpdateFrame
		bool SameJointsConstraint;
		bool DirtySelf;
		bool DirtyUpwards;
		bool AbsoluteScaling;
		JointArray JointTbl + 4
		via.mat4* JointMatrixTbl;
	};

	struct JointData
    {
      via.vec4 rotation;
      via.vec4 translation;
      via.vec4 scale;
      via.vec4 blend;
    };


	struct JointMap {
		JointData* joints;
		int32_t num_joints + 4
	};

	struct Motion 0x1000 {
		JointMap jointmap @ 0x200
	};
}

namespace via {
	namespace motion {
		enum AxisDirection {
			X = 1,
			Y = 2,
			NZ = 7
		};
	}

struct Range {
	float s;
	float r;
};
}

namespace via.clr {
struct VM { 
struct Field{};
};
};

namespace via.reflection {
	struct Method 0x100 {
		char* name [[utf8*]]
		void* function @ 0x18
		char* base_type @ 0x38 [[utf8*]]
		char* pass_type [[utf8*]]
		char* type_name [[utf8*]]
		char* full_type_name [[utf8*]]
	};

	struct MethodArray {
		Method** method;
		uint32_t num_methods;
		uint32_t num_allocated;
	};

	struct Property 0x138 {
		struct PropertyFlags {
    		uint32_t type_kind : 5;
    		uint32_t type_qual : 2;
   		 uint32_t type_attr : 3;
    		uint32_t size : 20;
    		uint32_t managed_str : 1;
    		uint32_t reserved : 1;
		};

		char* name [[utf8*]]
		//PropertyFlags flags + 8;

		uint32_t type_kind + 8;
		uint32_t type_qual
		uint32_t type_attr @ 0x18
		bool managed_str
	
		char* base_type @ 0x20 [[utf8*]]
		char* pass_type [[utf8*]]
		char* type_name [[utf8*]]
		char* full_type_name [[utf8*]]
		uint32_t size; // after dereference

		void* getter @ 0x60

		// here's how we tell if this property is an array!
		// EPIC
		void* getter_array
		void* getter_array2 @ 0xD0

		via.clr.VM.Field* vm_field @ 0x128
		uint32_t clr_member_type @ 0x130; // == 1 deserializable
	};

	struct PropertyArray  {
		Property** properties;
		uint32_t num_properties;
		uint32_t num_allocated;
	};

	struct Reflection 0x100 {
		MethodArray** method_variations;
		uint32_t num_methods;
		uint32_t num_allocated_methods;
		BullShit* a1
		PropertyArray* a3 + 8
		void* deserializer @ 0x30
	};
}

namespace via.typeinfo {
	struct DeserializeSequence 0x10 {
		uint16_t code;
    	uint16_t depth; // num non native types
    
    	uint32_t offset @ 4;
		via.reflection.Property* prop;
	};

    struct TypeInfo 0x190 {
        void** vfptr
        uint32_t fqn_hash
        uint16_t attributes
        uint16_t type
        uint64_t fast_class_index
		uint32_t flags @ 0x20;
        char* name @ 0x28 [[utf8*]]
		uint32_t parent_fqn
        uint32_t size + 4

		via.typeinfo.TypeInfo* parent @ 0x60
		via.typeinfo.TypeInfo* next;
		via.typeinfo.TypeInfo* prev;

		via.reflection.Reflection* reflection @ 0x178
		via.clr.VM.Type* vm_type
		uint32_t crc
    }

	struct TypeInfoCLR : TypeInfo {
		struct DeserializerArray {
			DeserializeSequence* data;
			uint32_t num;
			uint32_t num_allocated;
		};

		DeserializerArray deserializers;
		via.clr.VM.Type* native_type + 8
	}
}

namespace {
    struct ManagedVtable {
        void* vtable;
    }
}

namespace {
struct DeserializeSequence {
    uint32_t code : 8;
    uint32_t size : 8;
    uint32_t align : 8;
    uint32_t depth : 6;
    uint32_t is_array : 1;
    uint32_t is_static : 1;
    
    uint32_t offset;
    TypeDefinition* native_type;
};
}

namespace tdb49 {
	struct TypeDefinition 0x60 {
		uint32_t unk_data : 16
		//uint64_t unk : 6
		uint32_t unk_data2 : 16
		uint16_t parent_typeid;
		uint16_t declaring_typeid;

		uint16_t something @ 0x12
		uint32_t name_offset @ 0x14
		uint32_t namespace_offset
		uint32_t type_flags @ 0x1C
		uint16_t system_type @ 0x20
		uint8_t object_type @ 0x22
		uint16_t num_member_method @ 0x28
		uint16_t num_member_field
		uint16_t num_member_prop
		uint16_t num_virtual_method
		uint16_t num_virtual_field; // IDK. i just call it that because it sometimes doesnt match the num_member_fields
		uint32_t element_size @ 0x34; // size of raw value type
		uint32_t virtual_field_start @ 0x38; // bytepool array int32
		uint32_t member_method @ 0x40; // index into methods
		uint32_t member_field; // index into fields (wow so consistent...)
		uint32_t member_prop
		uint32_t virtual_method_start @ 0x4C; // bytepool array int
	};

	struct Module 0x1C {
		int32_t name
		int32_t bytepool1 +4 
		int32_t bytepool2 +4
		int32_t bytepool3 +4
	};

	struct MethodParam {
		uint16_t param_typeid
    	uint64_t flag : 32;
    	uint64_t name_offset : 32;
	};

	struct PropertyDefinition 0x14 {
		uint16_t declaring_typeid
		uint32_t name_offset @ 0x8
		uint32_t getter
		uint32_t setter
	};

	struct FieldDefinition 0x1C {
		uint64_t declaring_typeid : 16
		uint64_t field_typeid : 16
		uint32_t name_offset
		uint16_t flags
		uint16_t unk_thingy+2;
		uint32_t offset+2;
		int32_t init_data_offset;
	};

	struct MethodDefinition 0x20 {
		struct AdditionalData {
			int16_t unk;
			uint16_t return_typeid;
		};

		uint64_t declaring_typeid : 16;
    	uint64_t invoke_id : 16;
    	uint64_t num_params : 6;
    	uint64_t unk : 10; // NOT REALLY SURE WHAT THIS IS? IT HAS SOMETHING TO DO WITH RETURN TYPE
    	uint64_t vtable_index : 16;
    
    	//int16_t return_typeid @ 0xA;
    	uint32_t prototype_name_offset; // e.g. "(object, object):bool"
    	uint16_t flags;
		uint32_t name_offset +2
		uint16_t flags;
		uint16_t impl_flags
		uint32_t unk2
		uint32_t method_data_offset; // AdditionalData
    	//uint16_t impl_flags;
    	//uint32_t params; // bytepool
    	//uint32_t function_offset;
		//uint32_t unk2;
	}

	struct TDB 0x100 {
		uint32_t magic
		uint32_t version;                           // 0x0004
    	uint32_t initialized;                       // 0x0008
    	uint32_t numTypes;                          // 0x000C
    	uint32_t numMethods;                        // 0x0010
    	uint32_t numFields;                         // 0x0014
    	uint32_t numProperties;                     // 0x0018
    	uint32_t numEvents;                         // 0x001C
    	//uint32_t numUnk;                            // 0x0020
    	//uint32_t maybeNumParams;                    // 0x0024
    	//uint32_t maybeNumAttributes;                // 0x0028
    	uint32_t numInitData;                       // 0x002C
    	//uint32_t numInternStrings;                  // 0x0030
    	uint32_t numModules;                        // 0x0034
    	uint32_t devEntry;                          // 0x0038
    	uint32_t appEntry;                          // 0x003C
    	uint32_t numStringPool;                     // 0x0040
    	uint32_t numBytePool;                       // 0x0044
        Module* modules
        tdb49.TypeDefinition* types
		tdb49.MethodDefinition* methods
		tdb49.FieldDefinition* fields
		tdb49.PropertyDefinition* properties
		void* events

		void* strings; // 68
		uint8_t* bytes; 
	}
}

namespace System {
	struct String : via.clr.ManagedObject 0x100 {
		int32_t len
		char data[256] [[utf16*]]
	};
};

namespace game {
	struct InputSystem : via.clr.ManagedObject 0x170 {
	};

	struct IkArmFit 0x100 {
		struct ArmSolver : via.clr.ManagedObject 0x30 {
			via.Joint* ApplyJoint;
			via.motion.AxisDirection Dir;
			via.motion.AxisDirection Up;
			via.motion.AxisDirection Rot;
			float L0;
			float L1;
		};

		struct ArmData : via.clr.ManagedObject 0x80 {
			float BlendRate;
			via.Range ReachRate;
			System.String* ApplyHandName + 4;
			bool LeftHand;
			float DefaultHandAngle + 3
			via.Range AxisYRange;
			via.Range AxisZRange
			via.mat4 TargetMatrix;
		};
	}
}

namespace via {
	namespace gui {
		struct GUIManager{}
	}

	struct array : via.clr.ManagedObject 0x100 {
		TypeDefinition* contained_type
		int32_t count
		int32_t allocated
	};

	struct JobSet {
		struct Job{};
	};

	struct fixed_array_jobs {
		via.JobSet.Job jobs[8];
	};

	struct JobSet {
		struct JobThing 0x100 {
			void* func;
		};

		struct Unk 0x100{
			void** vtable;
			via.Object* owner;
			void* func
			via.Object* owner2 + 8;
		};

    	Unk* data;
	};
	
	namespace gui {
		struct TransformObject {};
		struct View {};

		struct PrimitiveContext 0x300 {
			int32_t gui_camera @ 0xEC
		};

		struct GUIMeshRenderer 0x100 {
			
		};

		struct GUI : via.Component  0x2D0 {
			via.SceneView* SceneView;
			void* GUIResource;
			void* RtTextureHandle;
			void* GUISound;
			bool Enabled @ 0x50
			bool FailedSetup;
			uint8_t MaskLayerBits;
			uint8_t MaskLayerBits2;
			uint8_t MaskLayerBits3;
			uint32_t RenderOutputID @ 0x58
			float PlaySpeed @ 0x5C
			uint32_t Segment;
			uint32_t SoftParticleDistType @ 0x64
			float SoftParticleDist;
			View* View + 4;
		};

		struct Control : TransformObject 0x1B0 {
			uint32_t StatePattern @ 0x124
			float PlayFrame @ 0x128
			via.vec4 ColorScale
			via.vec3 ColorOffset
			float Saturation
			bool UseGUISound @ 0x188
		};

		struct Window : Control 0x1C0 {
			bool Open
		};

		struct View : Window 0x1E0 {
			bool Overlay @ 0x1C0
			bool DepthTest;
			bool DetoneMap;
			bool CoordCorrection;
			uint32_t ViewType @ 0x1C4;
			uint32_t ReprojectionType+4;
			via.Size ScreenSize ;
			float BaseFps @ 0x1D8
			bool UseGUICamera
		};
	
		struct PlayObject : via.clr.ManagedObject 0x50 {
			wchar_t* Name [[utf16*]]
			GUI* Component;
			Control* Parent @ 0x28
			PlayObject* Next;
			PlayObject* Prev;
			
			uint16_t Priority @ 0x42

			uint8_t pad @ 0x47

			// Render flags
			uint64_t Visible : 1; // 1
            uint64_t Visible2 : 1; // 2
            uint64_t HitVisible : 1; // 3
            uint64_t ShouldPlay : 1; // 4
            uint64_t IsPlaying : 1; // 5
            uint64_t IsInteractive : 1; // 6
            uint64_t HasName : 1; // 7
            uint64_t HasTag : 1; // 8
            uint64_t SequenceAsset : 1; // 9
            uint64_t IsPNG : 1; // 10
            uint64_t IsJPG : 1; // 11
            uint64_t LinearAlphaBlend : 1; // 12
            uint64_t CompOwnership : 1; // 13
            uint64_t DuplicateRoot : 1; // 14
            uint64_t DataBind : 1; // 15
            uint64_t DataBinding : 1;  // 16
            uint64_t AllocExData : 1;  // 17
            uint64_t NextStateEnable : 1; // 18
            uint64_t _Unk : 1;  // 19
            uint64_t _Unk2 : 1;  // 20
            uint64_t ResolutionAdjust : 1; // 21
            uint64_t UniqueVisible : 1; // 22
            uint64_t EffectAlphaType : 1; // 23
            uint64_t HasOverrideProp : 1; // 24
            uint64_t IsCapturable : 1; // 25
            uint64_t ForceInvisible : 1; // 26
            uint64_t ClipPlaying : 1; // 27
            uint64_t BlendType : 2; // 28-29
            uint64_t MaskType : 3; // 30 - 32
            uint64_t MaskMode : 3; // 33 - 35
            uint64_t ColorType : 2; // 36 - 37
            uint64_t ControlPoint : 4; // 38 - 41
            uint64_t ResolutionCond : 2; // 42 - 43
            uint64_t ResolutionScale : 2; // 44 - 45
            uint64_t UVType : 2; // 46 - 47
            uint64_t UnkFlags : 17;
		};

		struct TransformObject : PlayObject 0x120 {
		};

		struct GUIManager 0x1A0 {
			via.JobSet update_task @ 0xe0
			via.JobSet draw_task @ 0x120;
		};
	}
}

namespace via {
namespace render {
	struct OutputTargetStateDX12 {}

	struct LightRenderer 0x7b30 {
		uint32_t frame1 @ 0x2610
		uint32_t FlushElapsedFrameCount @ 0x2700
		uint32_t frame2 @ 0x27c8
		uint32_t frame3 @ 0x27e8
	};

	struct RenderResource : via.Object {
		int32_t ref_count;
		uint32_t render_frame
	};

	struct RenderTargetView : RenderResource {
	};

	struct RenderTargetViewDX11 : RenderResource 0x100 {
		void* d3d11_resource @ 0x88; // backbuffer
	};

	struct RenderTargetViewDX12 : RenderResource 0x100 {
		OutputTargetStateDX12* output_state @ 0x80
	};

	struct TargetDescriptorDX11 {
		RenderTargetViewDX11** render_targets;
		void* depth_stencil;
		uint32_t num_render_targets;
		via.Size viewport + 8;
		uint32_t flag;
	};

	struct TargetDescriptorDX12 {
		RenderTargetViewDX12** render_targets;
		void* depth_stencil;
		uint32_t num_render_targets;
		via.Size viewport + 8;
		uint32_t flag;
	};

	struct OutputTargetState : RenderResource {

	};

	struct OutputTargetStateDX11: OutputTargetState {
		TargetDescriptorDX11 desc + 8;
		uint32_t hash
		void* swapchain @ 0xC8
		void* device
	};

	struct OutputTargetStateDX12 : OutputTargetState 0x200 {
		TargetDescriptorDX12 desc + 8;
		uint32_t hash

		void* re_engine_device @ 0xe8;
		void* swapchains[2];
		void* backbuffers[3];
		void* descriptors[3];
		int32_t current_index;
		uint32_t frame;
		
		// other stuff
	};


	struct Renderer : via.Object 0x5000 {
		struct FrameContext 0x100 {
			uint32_t frame_count
		};

		via.JobSet before_rendering_task @ 0xF80
		via.JobSet end_task @ 0x1000
	};

	struct RenderLayer{}

	struct LayerList {
		RenderLayer** layers;
		uint32_t num_layers;
		uint32_t allocated_layers;
	};

	struct RenderLayer : via.clr.ManagedObject 0x78 {
		LayerList layers @ 0x40
	};

	namespace layer {
		struct Output : via.render.RenderLayer 0x1000 {
			via.render.OutputTargetStateDX12* state
		};
	};
}
}

struct RenderDeviceDX11 : via.Object 0x100 {
	uint32_t driver_type
	uint32_t feature_level
	void* device @ 0x10
	void* immediate_context
	void* deferred_context
	void* dxgi_device
	void* dxgi_factory
};

struct Unk {
	RenderDeviceDX11* device
}

namespace via {
struct Entry : via.Object 0x100 {
};

struct Application : via.Object 0x38F10 {
	struct RangeInt {
		int32_t l;
		int32_t h;
    };

	struct Ticket {
		uint32_t priority;
		void* jobset + 4;
	};

	struct Function 0xD0 {
        via.Entry* entry; // 0 
        void* func; // 0x8
        void* unk; // 0x10
        char* description [[utf8*]]; // 0x18
        uint16_t priority; // 0x20 (via.ModuleEntry enum)
        uint16_t type; // 0x22
	};

	uint8_t bool_thing @ 0x340
	void* hwnd @ 0x3f8
	via.Entry* entries[128] @ 0x438
	Function functions[1024]
	RangeInt test[6];
	Ticket tickets[1024];
	uint32_t ticket_thing;
};
}
}